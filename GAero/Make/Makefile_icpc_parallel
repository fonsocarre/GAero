#
# 'make depend' uses makedepend to automatically generate dependencies 
#               (dependencies are added to end of Makefile)
# 'make'        build executable file 'mycc'
# 'make clean'  removes all .o and executable files
#
export _GLIBCXX_HAS_GTHREADS=1
# define the C compiler to use
CC = icpc

GXX_ROOT = /home/alfonso/opt/gcc-4.8.1/lib/gcc/x86_64-unknown-linux-gnu/4.8.1
MKLROOT = /home/alfonso/intel/composer_xe_2013_sp1.3.174/mkl

# define any compile-time flags
CFLAGS =\
     -O3\
     -fopenmp\
     -I$(MKLROOT)/include/intel64/lp64\
     -m64 -I$(MKLROOT)/include\
     -std=c++11 -no-multibyte-chars

# define any directories containing header files other than /usr/include
INCLUDES =\
    -Iinclude\
    -I$(MKLROOT)/include/intel64\
    -I$(MKLROOT)/include/intel64/lp64\
    -I/home/alfonso/opt/gcc-4.8.1/include/c++/4.8.1\
    -I/home/alfonso/opt/gcc-4.8.1/lib/gcc/x86_64-unknown-linux-gnu/4.8.1/include\
    -I/home/alfonso/opt/gcc-4.8.1/lib64\
    -I$(MKLROOT)/include

# define library paths in addition to /usr/lib
#   if I wanted to include libraries not in /usr/lib I'd specify
#   their path using -Lpath, something like:
LFLAGS =\
    $(MKLROOT)/lib/intel64/libmkl_lapack95_lp64.a\
    -Wl,--start-group $(MKLROOT)/lib/intel64/libmkl_gf_lp64.a $(MKLROOT)/lib/intel64/libmkl_core.a $(MKLROOT)/lib/intel64/libmkl_gnu_thread.a -Wl,--end-group\
    -ldl -lpthread -lm -Llib\
    -L/home/alfonso/intel/composer_xe_2013_sp1.3.174/compiler/lib/intel64/\
    -L/home/alfonso/intel/composer_xe_2013_sp1.3.174/mkl/lib/intel64/\
    -L/home/alfonso/OpenFOAM/ThirdParty-2.2.2/build/linux64/gcc-4.5.2/x86_64-unknown-linux-gnu/libgcc/

# define any libraries to link into executable:
#   if I want to link in libraries (libx.so or libx.a) I use the -llibname 
#   option, something like (this will link in libmylib.so and libm.so:
LIBS = \
    -lInterpolationLib\
    -laelf64o\
    -lconfig4cppUnix\
    -lifport\
    -lifcore\
    -lifcoremt\
    -lmkl_blas95_lp64\
    -lmkl_lapack95_lp64\
    -lmkl_intel_lp64\
    -lmkl_core\
    -lmkl_intel_thread\
    -lintlc\
    -limf

# define the C source files
SRCS = \
src/GAclass.cpp\
src/GAero.cpp\
src/GAfitnessClass.cpp\
src/GAfitnessOFClass.cpp\
src/GAfitnessSample.cpp\
src/GAoutputclass.cpp\
src/GApopulation.cpp\
src/GArandomGenerator.cpp\
src/GAsettingsClass.cpp\
src/NACA4digits.cpp\
src/interpolationKernelClass.cpp\
src/mersenne.cpp\
src/userintf.cpp\
src/phiAirfoil.cpp
# define the C object files 
#
# This uses Suffix Replacement within a macro:
#   $(name:string1=string2)
#         For each word in 'name' replace 'string1' with 'string2'
# Below we are replacing the suffix .c of all words in the macro SRCS
# with the .o suffix
#
OBJS = $(SRCS:.c=.o)

# define the executable file 
MAIN = GAero

#
# The following part of the makefile is generic; it can be used to 
# build any executable just by changing the definitions above and by
# deleting dependencies appended to the file from 'make depend'
#

.PHONY: depend clean

all:    $(MAIN)
		@echo  $(MAIN) has been compiled.

$(MAIN): $(OBJS) 
		$(CC) $(CFLAGS) $(INCLUDES) -o $(MAIN) $(OBJS) $(LFLAGS) $(LIBS)

# this is a suffix replacement rule for building .o's from .c's
# it uses automatic variables $<: the name of the prerequisite of
# the rule(a .c file) and $@: the name of the target of the rule (a .o file) 
# (see the gnu make manual section about automatic variables)
.c.o:
		$(CC) $(CFLAGS) $(INCLUDES) -c $<  -o $@

clean:
		$(RM) *.o *~ $(MAIN)

depend: $(SRCS)
		makedepend $(INCLUDES) $^

# DO NOT DELETE THIS LINE -- make depend needs it

